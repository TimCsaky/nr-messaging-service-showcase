---
apiVersion: v1
kind: Template
labels:
  app: "${APP_NAME}-${JOB_NAME}"
  template: "${APP_NAME}-${JOB_NAME}-ches-dc"
metadata:
  name: "${APP_NAME}-${JOB_NAME}-ches-dc"
objects:

  - apiVersion: secops.pathfinder.gov.bc.ca/v1alpha1
    kind: NetworkSecurityPolicy
    metadata:
      name: "${APP_NAME}-${JOB_NAME}-ches-backend-to-egress-${NAMESPACE}"
    spec:
      description: |
        Allow ches-backend to open connections to the internet
      source:
        - - "$namespace=${NAMESPACE}"
          - "app=${APP_NAME}-${JOB_NAME}"
          - "deploymentconfig=${APP_NAME}-${JOB_NAME}-ches-backend"
          - role=ches-backend
      destination:
      - - ext:network=any

  - apiVersion: v1
    kind: Service
    metadata:
      name: "${APP_NAME}-${JOB_NAME}-ches-backend"
    spec:
      ports:
        - name: 8888-tcp
          port: 8888
          protocol: TCP
          targetPort: 8888
      selector:
        app: "${APP_NAME}-${JOB_NAME}"
        deploymentconfig: "${APP_NAME}-${JOB_NAME}-ches-backend"
        role: ches-backend
      sessionAffinity: None
      type: ClusterIP

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: "${APP_NAME}-${JOB_NAME}-ches-backend"
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: "${APP_NAME}-${JOB_NAME}"
        deploymentconfig: "${APP_NAME}-${JOB_NAME}-ches-backend"
        role: ches-backend
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: "${APP_NAME}-${JOB_NAME}"
            deploymentconfig: "${APP_NAME}-${JOB_NAME}-ches-backend"
            role: ches-backend
        spec:
          containers:
            - image: "docker-registry.default.svc:5000/${NAMESPACE}/${APP_NAME}-${JOB_NAME}-ches-backend:latest"
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/ches/v1/"
                  port: 8888
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 60
                successThreshold: 1
                timeoutSeconds: 5
              name: "${APP_NAME}-${JOB_NAME}-ches"
              ports:
                - containerPort: 8888
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: "/ches/v1/"
                  port: 8888
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              env:
              - name: SERVER_HOST_URL
                value: ${SERVER_HOST_URL}
              - name: SERVER_PORT
                value: ${SERVER_PORT}
              - name: SERVER_LOGLEVEL
                value: ${SERVER_LOGLEVEL}
              - name: SERVER_MORGANFORMAT
                value: ${SERVER_MORGANFORMAT}
              - name: CHES_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: "ches-client"
              - name: CHES_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "ches-client"
              - name: KC_CLIENTID
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: "mssc-keycloak-client"
              - name: KC_CLIENTSECRET
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "mssc-keycloak-client"
              envFrom:
                - configMapRef:
                    name: "ches-config"
                - configMapRef:
                    name: "mssc-keycloak-config"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false

parameters:
  - name: APP_NAME
    description: Application name
    required: true
  - name: JOB_NAME
    description: Job identifier (i.e. 'pr-5' OR 'master')
    required: true
  - name: NAMESPACE
    description: OpenShift namespace containing our email microservice image to deploy (ex. idcqvl-dev)
    required: true
  - name: SERVER_HOST_URL
    description: The domain/base url where we will expose the api
    required: true
  - name: SERVER_PORT
    description: port for node to listen on.  Best to leave as the default 8888
    required: true
    value: "8888"
  - name: SERVER_LOGLEVEL
    description: set the npm log level (verbose, debug, info, warn, error)
    required: true
    value: "info"
  - name: SERVER_MORGANFORMAT
    description: set the logging format for Morgan
    required: true
    value: "dev"
  - name: CPU_REQUEST
    description: Requested CPU per pod (in millicores ex. 500m)
    required: true
    value: 500m
  - name: MEMORY_REQUEST
    description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
    required: true
    value: 1Gi
  - name: CPU_LIMIT
    description: Limit Peak CPU per pod (in millicores ex. 1000m)
    required: true
    value: 1000m
  - name: MEMORY_LIMIT
    description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
    required: true
    value: 2Gi
